generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  password            String
  name                String
  phone               String?
  role                String               @default("USER")
  status              String               @default("ACTIVE")
  mustChangePassword  Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  jobApplications     JobApplication[]
  projectApplications ProjectApplication[]
  resume              Resume?
  profile             UserProfile?

  @@map("users")
}

model UserProfile {
  id             String    @id @default(cuid())
  userId         String    @unique
  avatar         String?
  gender         String?
  birthDate      DateTime?
  nationality    String?
  idCard         String?
  address        String?
  education      String?
  workExperience String?
  researchField  String?
  achievements   String?
  wechat         String?
  qq             String?
  linkedin       String?
  website        String?
  bio            String?
  skills         String?
  interests      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Resume {
  id           String   @id @default(cuid())
  userId       String   @unique
  title        String?
  objective    String?
  summary      String?
  education    String?
  experience   String?
  projects     String?
  skills       String?
  certificates String?
  languages    String?
  hobbies      String?
  awards       String?
  attachments  String?
  isPublic     Boolean  @default(false)
  isComplete   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  basicInfo    String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("resumes")
}

model Park {
  id              String   @id @default(cuid())
  name            String
  description     String?
  type            String
  level           String
  province        String
  city            String
  district        String?
  address         String?
  latitude        Float?
  longitude       Float?
  establishedYear Int?
  area            Float?
  industries      String?
  policies        String?
  contact         String?
  images          String?
  status          String   @default("PUBLISHED")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("parks")
}

model Policy {
  id            String    @id @default(cuid())
  title         String
  content       String
  summary       String?
  type          String
  level         String
  publishDate   DateTime  @default(now())
  effectiveDate DateTime?
  expiryDate    DateTime?
  tags          String?
  keywords      String?
  department    String?
  attachments   String?
  viewCount     Int       @default(0)
  status        String    @default("PUBLISHED")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("policies")
}

model StartupProject {
  id               String               @id @default(cuid())
  title            String
  description      String
  category         String
  funding          Float?
  duration         Int?
  requirements     String?
  benefits         String?
  applicationStart DateTime?
  applicationEnd   DateTime?
  contactPerson    String?
  contactPhone     String?
  contactEmail     String?
  viewCount        Int                  @default(0)
  applicationCount Int                  @default(0)
  status           String               @default("PUBLISHED")
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  applications     ProjectApplication[]

  @@map("startup_projects")
}

model JobOpportunity {
  id               String           @id @default(cuid())
  title            String
  company          String
  description      String
  type             String
  level            String
  department       String?
  location         String
  salary           String?
  benefits         String?
  requirements     String?
  companySize      String?
  industry         String?
  publishDate      DateTime         @default(now())
  validUntil       DateTime?
  contact          String?
  viewCount        Int              @default(0)
  applicationCount Int              @default(0)
  status           String           @default("PUBLISHED")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  applications     JobApplication[]

  @@map("job_opportunities")
}

model ProjectApplication {
  id                 String         @id @default(cuid())
  userId             String
  projectId          String
  personalInfo       String?
  projectInfo        String?
  resumeUrl          String?
  businessPlanUrl    String?
  financialReportUrl String?
  otherDocsUrl       String?
  message            String?
  status             String         @default("PENDING")
  reviewNote         String?
  reviewedAt         DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  project            StartupProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_applications")
}

model JobApplication {
  id             String         @id @default(cuid())
  userId         String
  jobId          String
  coverLetter    String?
  resumeUrl      String?
  resumeData     String?
  expectedSalary String?
  availableDate  DateTime?
  additionalDocs String?
  status         String         @default("PENDING")
  reviewNote     String?
  reviewedAt     DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  job            JobOpportunity @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@map("job_applications")
}

model Guide {
  id        String   @id @default(cuid())
  category  String
  title     String
  content   String
  steps     String?
  order     Int      @default(0)
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("guides")
}

model FAQ {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String
  order     Int      @default(0)
  enabled   Boolean  @default(true)
  views     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model ContactInfo {
  id          String   @id @default(cuid())
  type        String
  title       String
  content     String
  description String?
  qrCode      String?  // 二维码图片URL
  order       Int      @default(0)
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("contact_infos")
}

model Feedback {
  id        String   @id @default(cuid())
  type      String
  title     String
  content   String
  contact   String
  rating    Int      @default(5)
  status    String   @default("pending")
  response  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feedbacks")
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  role      String
  avatar    String?
  content   String
  rating    Int      @default(5)
  order     Int      @default(0)
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("testimonials")
}
